LC 49, 362, 380, 381

> https://leetcode.com/discuss/interview-question/381353/affirm-phone-screen-letters-appearing-most-number-of-words
	https://leetcode.com/discuss/interview-question/358776/letters-that-occur-most-with-other-letters-in-a-list-of-multiple-words
	https://leetcode.com/discuss/interview-question/331117/
	
	Given an input list of strings, for each letter appearing anywhere 
	in the list, find the other letter(s) that appear in the most 
	number of words with that letter.
	
	Example: 
	['abc', 'bcd', 'cde'] =>
	  {
		a: [b, c],	# b appears in 1 word with a, c appears in 1 word with a
		b: [c], 	# c appears in 2 words with b, a and d each appear in only 1 word with b
		c: [b, d], 	# b appears in 2 words with c, d appears in 2 words with c. But a and e each 
						  appear in only 1 word with c.
		d: [c],		# c appears in 2 words with d. But b and e each appear in only 1 word with d
		e: [c, d], 	# c appears in 1 word with e, d appears in 1 word with e
			
	  }
	  
	  
	  
> [Look here]https://leetcode.com/discuss/interview-experience/761171/affirm-senior-swe-july-2020-reject

> https://leetcode.com/discuss/interview-question/447215/interview-question-affirm

> https://leetcode.com/discuss/interview-question/1530392/affirm-phone-find-popup

	a. Find POPUP, make all the sibling of POPUP to hidden
	b. Find out POPUP's parent, make all the sibling of parent to hidden

	// Initial State:

	//              ROOT
	//          /     |    \
	//         /      |     \
	//       B       C        D
	//    /   |            /  | \  \
	//   /    |           /   |  \  \
	// F      G      (POPUP)  I  J  (K)
	//              /   |   \   / \
	//             /    |    \  Z  Y
	//            N     O    (P)
	
	
	// After openPopup called:
	
	//              ROOT
	//          /     |    \
	//         /      |     \
	//      (B)      (C)      D
	//    /   |            /  | \   \
	//   /    |           /   |  \   \
	// F      G       POPUP  (I)  (J) (K)
	//              /   |   \
	//             /    |    \
	//            N     O     (P)
	
	private static class DomNode {
			DomNode parent;
	        String id;
	        boolean hidden;
	        List<DomNode> children;
	
	        public DomNode(String id, boolean hidden, List<DomNode> children) {
	            this.hidden = hidden;
	            this.id = id;
	            this.children = children;
	        }
	    }

	  
