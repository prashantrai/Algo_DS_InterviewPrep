Refer below google doc for questions: 

https://docs.google.com/document/d/1i5B6oP3po0iS8289LeL7UMu3lNEXV2GtQQJPG4gIDiM/edit



---------------------


The system should allow scheduling payments and checking the status of scheduled payments.

Optional<String> schedulePayment(int timestamp, String accountId, int amount, int delay) — should schedule a payment which will be performed at timestamp + delay. Returns a string with a unique identifier for the scheduled payment in the following format: "payment[ordinal number of the scheduled payment across all accounts]" - e.g., "payment1", "payment2", etc. If accountId doesn't exist, should return Optional.empty(). The payment is skipped if the specified account has insufficient funds when the payment is performed. Additional conditions:

Successful payments should be considered outgoing transactions and included when ranking accounts using the topSpenders operation.
Scheduled payments should be processed before any other transactions at the given timestamp.
If an account needs to perform several scheduled payments simultaneously, they should be processed in order of creation - e.g., "payment1" should be processed before "payment2".
boolean cancelPayment(int timestamp, String accountId, String paymentId) — should cancel the scheduled payment with paymentId. Returns true if the scheduled payment is successfully canceled. If paymentId does not exist or was already canceled, or if accountId is different from the source account for the scheduled payment, returns false. Note that scheduled payments must be performed before any cancelPayment operations at the given timestamp.

Examples
The examples below show how these operations should work (the section is scrollable to the right):

Queries	Explanations
createAccount(1, "account1")
createAccount(2, "account2")
deposit(3, "account1", 2000)
deposit(4, "account2", 3000)
schedulePayment(5, "account1", 50, 10)
schedulePayment(6, "account2", 1000, 5)
schedulePayment(7, "account1", 3000, 7)
deposit(11, "account2", 5)
cancelPayment(12, "account2", "payment1")
cancelPayment(13, "account1", "payment1")
deposit(14, "account1", 5)
deposit(15, "account1", 5)
returns true
returns true
returns 2000
returns 3000
returns "payment1"
returns "payment2"
returns "payment3"
returns 2005; the initial balance was 3000, and "payment2" withdrew 1000
returns false; "payment1" was created for another account
returns true
returns 2005; although "payment3" was scheduled for this timestamp, "account1" only has a balance of 2000 at this time, so the payment is skipped
returns 2010; "payment1" was canceled prior to this timestamp
Another example could be:

Queries	Explanations
createAccount(1, "account1")
createAccount(2, "account2")
createAccount(3, "account3")
deposit(4, "account1", 1000)
deposit(5, "account2", 1000)
deposit(6, "account3", 1000)
schedulePayment(7, "account1", 300, 10)
schedulePayment(8, "account2", 400, 10)
topSpenders(15, 3)
topSpenders(20, 3)
returns true
returns true
returns true
returns 1000
returns 1000
returns 1000
returns "payment1"
returns "payment2"
returns ["account1(0)", "account2(0)", "account3(0)"]; none of the accounts have any outgoing transactions, so they are sorted alphabetically
returns ["account2(400)", "account1(300)", "account3(0)"]